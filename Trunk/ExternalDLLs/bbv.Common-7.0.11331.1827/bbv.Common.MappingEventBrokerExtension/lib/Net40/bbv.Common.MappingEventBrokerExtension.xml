<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bbv.Common.MappingEventBrokerExtension</name>
    </assembly>
    <members>
        <member name="T:bbv.Common.MappingEventBrokerExtension.EventBrokerExtensionsForMapping">
            <summary>
            Contains extension methods which simplify adding mapping extensions.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.EventBrokerExtensionsForMapping.AddMappingExtension``1(bbv.Common.EventBroker.IEventBroker,``0)">
            <summary>
            Adds the mapping extension to the provided event broker.
            </summary>
            <typeparam name="TMappingExtension">The type of the mapping extension.</typeparam>
            <param name="eventBroker">The event broker.</param>
            <param name="extension">The extension.</param>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.IDestinationEventArgsTypeProvider">
            <summary>
            The destination event argument types provider is responsible to return
            destination event arguments for a given destination topic.
            </summary>
            <remarks>When the destination event argument type is not found an null
            is returned instead the mapping process must be skipped.</remarks>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.IDestinationEventArgsTypeProvider.GetDestinationEventArgsType(System.String,System.Type)">
            <summary>
            Gets the destination event argument type for the given destination
            topic URI or <see langword="null"/> if nothing found.
            </summary>
            <param name="destinationTopic">The destination topic.</param>
            <param name="sourceEventArgsType">Type of the source event argument.</param>
            <returns>
            The destination event argument type or <see langword="null"/>.
            </returns>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.IManageEventBroker">
            <summary>
            Interface which defines a component which manages a single event broker.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.IManageEventBroker.Manage(bbv.Common.EventBroker.IEventBroker)">
            <summary>
            Manages the specified event broker.
            </summary>
            <param name="eventBroker">The event broker.</param>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.IMapper">
            <summary>
            Mapper interface which must be implemented by mapping algorithms.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.IMapper.HasMapping(System.Type,System.Type)">
            <summary>
            Determines whether there exists a mapping from the provided
            <paramref name="sourceEventArgsType"/> to the 
            <paramref name="destinationEventArgsType"/>.
            </summary>
            <param name="sourceEventArgsType">The source event argument type.</param>
            <param name="destinationEventArgsType">The destination event argument type.</param>
            <returns><see langword="true"/> if there is a mapping; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.IMapper.Map(System.Type,System.Type,System.EventArgs)">
            <summary>
            Maps the provided event argument from the 
            <paramref name="sourceEventArgsType"/> to the 
            <paramref name="destinationEventArgsType"/>.
            </summary>
            <param name="sourceEventArgsType">The source event argument type.</param>
            <param name="destinationEventArgsType">The destination event argument type.</param>
            <param name="eventArgs">The source event argument.</param>
            <returns>The mapped event argument.</returns>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension">
            <summary>
            This extension allows to dynamically remap topics based on a convention
            from one event argument type to another event argument type using 
            <see cref="T:bbv.Common.MappingEventBrokerExtension.IMapper"/>.
            <code>
               public class Publisher
               {
                   [EventPublication(@"topic://Original")]
                   public event EventHandler Event;
                   private void InvokeEvent(EventArgs e)
                   {
                       EventHandler handler = Event;
                       if (handler != null) handler(this, e);
                   }
                   public void Publish()
                   {
                       this.InvokeEvent(EventArgs.Empty);
                   }
               }
               public class SubscriberOriginal
               {
                   [EventSubscription(@"topic://Original", typeof(bbv.Common.EventBroker.Handlers.Publisher))]
                   public void HandleOriginal(object sender, EventArgs e)
                   {
                   }
               }
               public class SubscriberMapped
               {
                   [EventSubscription(@"mapped://Original", typeof(bbv.Common.EventBroker.Handlers.Publisher))]
                   public void HandleOriginal(object sender, CancelEventArgs e)
                   {
                   }
               }
            </code>
            </summary>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.IMappingEventBrokerExtension">
            <summary>
            Interface which defines an auto mapper event broker extension.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.IMappingEventBrokerExtension.SetMissingMappingAction(bbv.Common.MappingEventBrokerExtension.MissingMappingAction)">
            <summary>
            Sets the missing mapping action which is called when no mapping was previously defined.
            </summary>
            <param name="action">The missing mapping action.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.#ctor(bbv.Common.MappingEventBrokerExtension.IMapper,bbv.Common.MappingEventBrokerExtension.IDestinationEventArgsTypeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension"/> class.
            </summary>
            <param name="mapper">The mapper.</param>
            <param name="typeProvider">The destination event argument type provider which overrides the default.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.#ctor(bbv.Common.MappingEventBrokerExtension.IMapper,bbv.Common.MappingEventBrokerExtension.ITopicConvention,bbv.Common.MappingEventBrokerExtension.IDestinationEventArgsTypeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension"/> class.
            </summary>
            <param name="mapper">The mapper.</param>
            <param name="topicConvention">The topic convention which overrides the default behavior.</param>
            <param name="typeProvider">The destination event argument type provider which overrides the default.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.CreatedTopic(bbv.Common.EventBroker.Internals.IEventTopicInfo)">
            <summary>
            Called after an event topic was created.
            </summary>
            <param name="eventTopic">The event topic.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.SetMissingMappingAction(bbv.Common.MappingEventBrokerExtension.MissingMappingAction)">
            <summary>
            Sets the missing mapping action which is called when no mapping was previously defined.
            </summary>
            <param name="action">The missing mapping action.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.FiringEvent(bbv.Common.EventBroker.Internals.IEventTopicInfo,bbv.Common.EventBroker.Internals.IPublication,System.Object,System.EventArgs)">
            <summary>
            Called when an event is fired.
            </summary>
            <param name="eventTopic">The event topic.</param>
            <param name="publication">The publication.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.Disposed(bbv.Common.EventBroker.Internals.IEventTopicInfo)">
            <summary>
            Called after an event topic was disposed.
            </summary>
            <param name="eventTopic">The event topic.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.Manage(bbv.Common.EventBroker.IEventBroker)">
            <summary>
            Manages the specified event broker.
            </summary>
            <param name="eventBroker">The event broker.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.MustProceed(System.String,System.String)">
            <summary>
            Determines whether the the topic must be mapped and refired.
            </summary>
            <param name="topic">The topic.</param>
            <param name="mappedTopic">The mapped topic.</param>
            <returns><see langword="true"/> if the topic must be mapped and
            refired.</returns>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.AssertEventBrokerManaged">
            <summary>
            Asserts that an event broker is managed by this instance.
            </summary>
        </member>
        <member name="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.Topics">
            <summary>
            Gets the topics which are controlled by the event broker and accepted by the <see cref="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.TopicConvention"/>.
            </summary>
            <value>The topics.</value>
        </member>
        <member name="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.TopicConvention">
            <summary>
            Gets the topic convention.
            </summary>
            <value>The topic convention.</value>
        </member>
        <member name="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.Action">
            <summary>
            Gets the missing mapping action.
            </summary>
            <value>The missing mapping action.</value>
        </member>
        <member name="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.Mapper">
            <summary>
            Gets the mapper.
            </summary>
            <value>The mapper.</value>
        </member>
        <member name="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.TypeProvider">
            <summary>
            Gets the destination event argument type provider.
            </summary>
        </member>
        <member name="P:bbv.Common.MappingEventBrokerExtension.MappingEventBrokerExtension.HostedEventBroker">
            <summary>
            Gets the hosted event broker.
            </summary>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.Conventions.DefaultTopicConvention">
            <summary>
            The default convention does automatically remap all event topics which
            start with topic:// to topics which start with mapped://. Therefore if using this topic convention the following is possible:
            <code>
               public class Publisher
               {
                   [EventPublication(@"topic://Original")]
                   public event EventHandler Event;
                   private void InvokeEvent(EventArgs e)
                   {
                       EventHandler handler = Event;
                       if (handler != null) handler(this, e);
                   }
                   public void Publish()
                   {
                       this.InvokeEvent(EventArgs.Empty);
                   }
               }
               public class SubscriberOriginal
               {
                   [EventSubscription(@"topic://Original", typeof(bbv.Common.EventBroker.Handlers.Publisher))]
                   public void HandleOriginal(object sender, EventArgs e)
                   {
                   }
               }
               public class SubscriberMapped
               {
                   [EventSubscription(@"mapped://Original", typeof(bbv.Common.EventBroker.Handlers.Publisher))]
                   public void HandleOriginal(object sender, CancelEventArgs e)
                   {
                   }
               }
            </code>
            </summary>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.ITopicConvention">
            <summary>
            Interface for topic conventions.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.ITopicConvention.IsCandidate(bbv.Common.EventBroker.Internals.IEventTopicInfo)">
            <summary>
            Determines whether the specified event topic is a candidate to process.
            </summary>
            <remarks>The mapped side must also be included!</remarks>
            <param name="eventTopic">The event topic.</param>
            <returns>
            <c>true</c> if the specified event topic is candidate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.ITopicConvention.MapTopic(System.String)">
            <summary>
            Maps the topic from the source format to the destination format.
            </summary>
            <param name="topic">The source topic.</param>
            <returns>The mapped topic.</returns>
        </member>
        <member name="F:bbv.Common.MappingEventBrokerExtension.Conventions.DefaultTopicConvention.EventTopicUriInput">
            <summary>
            The default event topic URI for inputs.
            </summary>
        </member>
        <member name="F:bbv.Common.MappingEventBrokerExtension.Conventions.DefaultTopicConvention.EventTopicUriOutput">
            <summary>
            The default event topic URI for outputs
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.DefaultTopicConvention.IsCandidate(bbv.Common.EventBroker.Internals.IEventTopicInfo)">
            <summary>
            Determines whether the specified event topic is a candidate to process.
            </summary>
            <param name="eventTopic">The event topic.</param>
            <returns>
            <c>true</c> if the specified event topic is candidate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.DefaultTopicConvention.MapTopic(System.String)">
            <summary>
            Maps the topic from the source format to the destination format.
            </summary>
            <param name="topic">The source topic URI.</param>
            <returns>The mapped topic URI.</returns>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.DefaultTopicConvention.StartsWith(bbv.Common.EventBroker.Internals.IEventTopicInfo,System.String)">
            <summary>
            Determines whether the topics URI starts with start.
            </summary>
            <param name="eventTopic">The event topic.</param>
            <param name="start">The start of the topic.</param>
            <returns><see langword="true"/> if the topic URI starts with start;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention">
            <summary>
            This topic convention implementation allows to use lambda expressions for dynamic topic convention.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention.#ctor(System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention"/> class.
            </summary>
            <param name="topicMapper">The topic mapper.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention.#ctor(System.Func{bbv.Common.EventBroker.Internals.IEventTopicInfo,System.Boolean},System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention"/> class.
            </summary>
            <param name="candidateSelector">The candidate selector.</param>
            <param name="topicMapper">The topic mapper.</param>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention.IsCandidate(bbv.Common.EventBroker.Internals.IEventTopicInfo)">
            <summary>
            Determines whether the specified event topic is a candidate to process.
            </summary>
            <param name="eventTopic">The event topic.</param>
            <returns>
            <c>true</c> if the specified event topic is candidate; otherwise, <c>false</c>.
            </returns>
            <remarks>The mapped side must also be included!</remarks>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.Conventions.FuncTopicConvention.MapTopic(System.String)">
            <summary>
            Maps the topic from the source format to the destination format.
            </summary>
            <param name="topic">The source topic URI.</param>
            <returns>The mapped topic URI.</returns>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.EventTopicCollection">
            <summary>
            Specialized keyed collection which used the <see cref="P:bbv.Common.EventBroker.Internals.IEventTopicInfo.Uri"/> as key.
            </summary>
        </member>
        <member name="M:bbv.Common.MappingEventBrokerExtension.EventTopicCollection.GetKeyForItem(bbv.Common.EventBroker.Internals.IEventTopicInfo)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <returns>
            The key for the specified element.
            </returns>
            <param name="item">The element from which to extract the key.
            </param>
        </member>
        <member name="T:bbv.Common.MappingEventBrokerExtension.MissingMappingAction">
            <summary>
            Delegate which is called when a mapping could not be found.
            </summary>
            <param name="source">The source topic info.</param>
            <param name="destinationTopic">The destination topic.</param>
            <param name="publication">The publication.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
    </members>
</doc>
